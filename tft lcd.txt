

NAME:Luvpreet Kaur
ROLLNO:304338


#include "LPC1768_Includes.h"
#include "LCD.h"

void delay(unsigned int time)    
{ 
	unsigned int i,j; 
	for(i=0; i<time; i++ )
		for(j=0; j<2000; j++);
}

unsigned char ReadWriteByte(unsigned char ch)	 //write and read a byte at the same time (full duplex operation)
{
unsigned char temp;
while(SSP1SR & BUSY);						//wait if SSP peripheral is busy
SSP1DR = ch;								//write data to SSP data register
while(SSP1SR & BUSY);						//wait for transmission to be complete
temp = SSP1DR;								//read SSP data register
return temp;
}

void WriteIndex(unsigned int index)				//select a register in the ILI9325 chip
{
FIO0CLR = CS;									//Chip Select LOW
ReadWriteByte(SPI_START | SPI_WR | SPI_INDEX);	//Command WRITE INDEX
ReadWriteByte(0);							  	//dummy byte
ReadWriteByte(index);						   	
FIO0SET = CS;								   	//Chip Select high
}

void WriteData(unsigned int ch)
{
FIO0CLR = CS;								  	//Chip Select low
ReadWriteByte(SPI_START | SPI_WR | SPI_DATA);	//Command WRITE DATA
ReadWriteByte(ch>>8);							//send higher byte
ReadWriteByte(ch & 0xFF);						//send lower byte
FIO0SET = CS;  									//Chip Select high
}

unsigned int ReadData(void)
{
unsigned int temp = 0;
FIO0CLR = CS;									//Chip Select low
ReadWriteByte(SPI_START | SPI_RD | SPI_DATA); 	//Command READ DATA
ReadWriteByte(0);							   	//dummy write
temp |= ReadWriteByte(0);					   	//read higher byte
temp = temp<<8;
temp |= ReadWriteByte(0);						//read lower byte
FIO0SET = CS; 									//Chip Select high
return temp;
}

void WriteReg(unsigned int reg, unsigned int value)	   	//write value to a register in LCD
{														//write reg = write index + write data at that index
WriteIndex(reg);
WriteData(value);
}

unsigned int ReadReg(unsigned int reg)				  	//Read value from a register in LCD
{														//read reg = write index + read data from that index
unsigned int temp;
WriteIndex(reg);
temp = ReadData();
return temp;
}


void LCD_initialise(void)
{
	PINSEL0 &= 0xFFF03FFF;
	PINSEL0 |= 0x000A8000;		//configure SPI1 pins; P0.6 as GPIO
	PINSEL3 &= 0xF3C3FFFF;		//configure WR, RS and backlight pins as GPIO
	FIO0DIR |= CS;				//set CS, WR,RS,BK as output
	FIO1DIR |= WR | RS | BK;
	FIO0SET = CS;
	FIO1SET = BK;
	FIO1CLR	= WR;

	/* SPI configuratiom */
	PCONP |= 1<<10;
	SSP1CR0 =  0x000000C7;	   	//CPHA =1;  CPOL=0;  FrameFormat=SPI;  Databits=8bits;  SCR=0x40
	SSP1CPSR = 0x02;		   	//Prescale = 2		 
	SSP1CR1 =  0x00000002;		//SSP Enable in Master Mode

	delay(100);

	WriteReg(0xB1, 0x0000);
	WriteReg(0xE5, 0x78F0); /* set SRAM internal timing */
	WriteReg(0x01, 0x0100); /* set Driver Output Control */
	WriteReg(0x02, 0x0700); /* set 1 line inversion */
	WriteReg(0x03, 0x1030); /* set GRAM write direction and BGR=1 */
	WriteReg(0x04, 0x0000); /* Resize register */
	WriteReg(0x08, 0x0207); /* set the back porch and front porch */
	WriteReg(0x09, 0x0000); /* set non-display area refresh cycle ISC[3:0] */
	WriteReg(0x0A, 0x0000); /* FMARK function */
	WriteReg(0x0C, 0x0000); /* RGB interface setting */
	WriteReg(0x0D, 0x0000); /* Frame marker Position */
	WriteReg(0x0F, 0x0000); /* RGB interface polarity */
	/*************Power On sequence ****************/
	WriteReg(0x10, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
	WriteReg(0x11, 0x0007); /* DC1[2:0], DC0[2:0], VC[2:0] */
	WriteReg(0x12, 0x0000); /* VREG1OUT voltage */
	WriteReg(0x13, 0x0000); /* VDV[4:0] for VCOM amplitude */
	WriteReg(0x07, 0x0001);
	delay(200); 
	/* Dis-charge capacitor power voltage */
	WriteReg(0x10, 0x1090); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
	WriteReg(0x11, 0x0227); /* Set DC1[2:0], DC0[2:0], VC[2:0] */
	delay(50); 							/* Delay 50ms */
	WriteReg(0x12, 0x001F); 
	delay(50); 							/* Delay 50ms */
	WriteReg(0x13, 0x1500); /* VDV[4:0] for VCOM amplitude */
	WriteReg(0x29, 0x0027); /* 04 VCM[5:0] for VCOMH */
	WriteReg(0x2B, 0x000D); /* Set Frame Rate */
	delay(50); 							/* Delay 50ms */
	WriteReg(0x20, 0x0000); /* GRAM horizontal Address */
	WriteReg(0x21, 0x0000); /* GRAM Vertical Address */
	/* ----------- Adjust the Gamma Curve ---------- */
	WriteReg(0x30, 0x0000);
	WriteReg(0x31, 0x0707);
	WriteReg(0x32, 0x0307);
	WriteReg(0x35, 0x0200);
	WriteReg(0x36, 0x0008);
	WriteReg(0x37, 0x0004);
	WriteReg(0x38, 0x0000);
	WriteReg(0x39, 0x0707);
	WriteReg(0x3C, 0x0002);
	WriteReg(0x3D, 0x1D04);
	/* ------------------ Set GRAM area --------------- */
	WriteReg(0x50, 0x0000); /* Horizontal GRAM Start Address */
	WriteReg(0x51, 0x00EF); /* Horizontal GRAM End Address */
	WriteReg(0x52, 0x0000); /* Vertical GRAM Start Address */
	WriteReg(0x53, 0x013F); /* Vertical GRAM Start Address */
	
	WriteReg(0x60, 0xA700); /* Gate Scan Line */
	WriteReg(0x61, 0x0001); /* NDL,VLE, REV */
	WriteReg(0x6A, 0x0000); /* set scrolling line */
	/* -------------- Partial Display Control --------- */
	WriteReg(0x80, 0x0000);
	WriteReg(0x81, 0x0000);
	WriteReg(0x82, 0x0000);
	WriteReg(0x83, 0x0000);
	WriteReg(0x84, 0x0000);
	WriteReg(0x85, 0x0000);
	/* -------------- Panel Control ------------------- */
	WriteReg(0x90, 0x0010);
	WriteReg(0x92, 0x0600);
	WriteReg(0x07, 0x0133); /* 262K color and display ON */	
}



